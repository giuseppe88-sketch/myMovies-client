var helpers = require("../../../../../.nvm/versions/node/v15.14.0/lib/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  _parcelHelpers.export(exports, "MainView", function () {
    return MainView;
  });
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _axios = require('axios');
  var _axiosDefault = _parcelHelpers.interopDefault(_axios);
  var _reactRouterDom = require("react-router-dom");
  var _reactBootstrapRow = require('react-bootstrap/Row');
  var _reactBootstrapRowDefault = _parcelHelpers.interopDefault(_reactBootstrapRow);
  var _reactBootstrapCol = require('react-bootstrap/Col');
  var _reactBootstrapColDefault = _parcelHelpers.interopDefault(_reactBootstrapCol);
  require('react-bootstrap/Button');
  var _registrationViewRegistrationView = require('../registration-view/registration-view');
  var _loginViewLoginView = require('../login-view/login-view');
  var _movieCardMovieCard = require('../movie-card/movie-card');
  var _movieViewMovieView = require('../movie-view/movie-view');
  var _directorViewDirectorView = require('../director-view/director-view');
  var _genreViewGenreView = require('../genre-view/genre-view');
  var _jsxFileName = "/home/giuseppe/Desktop/myMovies-client/src/components/main-view/main-view.jsx";
  class MainView extends _reactDefault.default.Component {
    constructor() {
      super();
      this.state = {
        movies: [],
        selectedMovie: null,
        user: null,
        directors: [],
        genres: [],
        actors: []
      };
    }
    componentDidMount() {
      let accessToken = localStorage.getItem('token');
      if (accessToken !== null) {
        this.setState({
          user: localStorage.getItem('user')
        });
        this.getMovies(accessToken);
        this.getDirectors(accessToken);
        this.getGenres(accessToken);
        this.getActors(accessToken);
      }
    }
    setSelectedMovie(newSelectedMovie) {
      this.setState({
        selectedMovie: newSelectedMovie
      });
    }
    onRegisterIn(user) {
      this.setState({
        user
      });
    }
    onLoggedIn(authData) {
      console.log(authData);
      this.setState({
        user: authData.user.username
      });
      localStorage.setItem('token', authData.token);
      localStorage.setItem('user', authData.user.username);
      this.getMovies(authData.token);
      this.getDirectors(authData.token);
      this.getGenres(authData.token);
      this.getActors(authData.token);
    }
    onLoggedOut() {
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      this.setState({
        user: null
      });
    }
    getMovies(token) {
      _axiosDefault.default.get('https://mymovies-db-api.herokuapp.com/movies', {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }).then(response => {
        // assign result to the state
        this.setState({
          movies: response.data
        });
      }).catch(function (error) {
        console.log(error);
      });
    }
    getDirectors(token) {
      _axiosDefault.default.get('https://mymovies-db-api.herokuapp.com/directors', {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }).then(response => {
        // assign result to the state
        this.setState({
          directors: response.data
        });
      }).catch(function (error) {
        console.log(error);
      });
    }
    getGenres(token) {
      _axiosDefault.default.get('https://mymovies-db-api.herokuapp.com/genres', {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }).then(response => {
        // assign result to the state
        this.setState({
          genres: response.data
        });
        console.log(response.data);
      }).catch(function (error) {
        console.log(error);
      });
    }
    getActors(token) {
      _axiosDefault.default.get('https://mymovies-db-api.herokuapp.com/actors', {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }).then(response => {
        // assign result to the state
        this.setState({
          actors: response.data
        });
        console.log(response.data);
      }).catch(function (error) {
        console.log(error);
      });
    }
    render() {
      const {movies, user, directors, genres, actors} = this.state;
      return (
        /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.BrowserRouter, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 147,
            columnNumber: 9
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapRowDefault.default, {
          className: "main-view justify-content-md-center",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 148,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.Route, {
          exact: true,
          path: "/",
          render: () => {
            if (!user) return (
              /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 150,
                  columnNumber: 35
                }
              }, /*#__PURE__*/_reactDefault.default.createElement(_loginViewLoginView.LoginView, {
                onLoggedIn: user => this.onLoggedIn(user),
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 151,
                  columnNumber: 17
                }
              }))
            );
            if (movies.length === 0) return (
              /*#__PURE__*/_reactDefault.default.createElement("div", {
                className: "main-view",
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 153,
                  columnNumber: 47
                }
              })
            );
            return movies.map(m => /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
              md: 3,
              key: m._id,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 155,
                columnNumber: 17
              }
            }, /*#__PURE__*/_reactDefault.default.createElement(_movieCardMovieCard.MovieCard, {
              movieData: m,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 156,
                columnNumber: 19
              }
            })));
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 149,
            columnNumber: 15
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.Route, {
          path: "/register",
          render: () => {
            if (user) return (
              /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.Redirect, {
                to: "/",
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 161,
                  columnNumber: 33
                }
              })
            );
            return (
              /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 162,
                  columnNumber: 21
                }
              }, /*#__PURE__*/_reactDefault.default.createElement(_registrationViewRegistrationView.RegistrationView, {
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 163,
                  columnNumber: 17
                }
              }))
            );
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 160,
            columnNumber: 13
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.Route, {
          path: "/movies/:movieId",
          render: ({match}) => {
            if (!user) return (
              /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 167,
                  columnNumber: 38
                }
              }, /*#__PURE__*/_reactDefault.default.createElement(_loginViewLoginView.LoginView, {
                onLoggedIn: user => this.onLoggedIn(user),
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 168,
                  columnNumber: 21
                }
              }))
            );
            if (movies.length === 0) return (
              /*#__PURE__*/_reactDefault.default.createElement("div", {
                className: "main-view",
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 170,
                  columnNumber: 51
                }
              })
            );
            return (
              /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
                md: 8,
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 171,
                  columnNumber: 28
                }
              }, /*#__PURE__*/_reactDefault.default.createElement(_movieViewMovieView.MovieView, {
                movie: movies.find(m => m._id === match.params.movieId),
                onBackClick: () => history.goBack(),
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 172,
                  columnNumber: 19
                }
              }))
            );
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 166,
            columnNumber: 17
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.Route, {
          path: "/directors/:name",
          render: ({match}) => {
            if (!user) return (
              /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 176,
                  columnNumber: 37
                }
              }, /*#__PURE__*/_reactDefault.default.createElement(_loginViewLoginView.LoginView, {
                onLoggedIn: user => this.onLoggedIn(user),
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 177,
                  columnNumber: 20
                }
              }))
            );
            if (movies.length === 0) return (
              /*#__PURE__*/_reactDefault.default.createElement("div", {
                className: "main-view",
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 179,
                  columnNumber: 52
                }
              })
            );
            return (
              /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
                md: 8,
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 180,
                  columnNumber: 24
                }
              }, /*#__PURE__*/_reactDefault.default.createElement(_directorViewDirectorView.DirectorView, {
                director: directors.find(m => m.directors.name === match.params.name).directors,
                onBackClick: () => history.goBack(),
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 181,
                  columnNumber: 19
                }
              }))
            );
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 175,
            columnNumber: 16
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.Route, {
          exact: true,
          path: "/directors",
          render: () => {
            console.log(directors);
            return directors.map(m => /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
              md: 3,
              key: m._id,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 189,
                columnNumber: 17
              }
            }, /*#__PURE__*/_reactDefault.default.createElement(_directorViewDirectorView.DirectorView, {
              directorData: m,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 190,
                columnNumber: 21
              }
            })));
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 185,
            columnNumber: 13
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.Route, {
          exact: true,
          path: "/genres",
          render: () => {
            console.log(genres);
            return genres.map(m => /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
              md: 3,
              key: m._id,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 198,
                columnNumber: 17
              }
            }, /*#__PURE__*/_reactDefault.default.createElement(_genreViewGenreView.GenreView, {
              genresData: m,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 199,
                columnNumber: 21
              }
            })));
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 195,
            columnNumber: 14
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.Route, {
          path: "/genres/:name",
          render: ({match, history}) => {
            if (!user) return (
              /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 206,
                  columnNumber: 31
                }
              }, /*#__PURE__*/_reactDefault.default.createElement(_loginViewLoginView.LoginView, {
                onLoggedIn: user => this.onLoggedIn(user),
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 207,
                  columnNumber: 15
                }
              }))
            );
            if (movies.length === 0) return (
              /*#__PURE__*/_reactDefault.default.createElement("div", {
                className: "main-view",
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 209,
                  columnNumber: 45
                }
              })
            );
            return (
              /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
                md: 8,
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 210,
                  columnNumber: 20
                }
              }, /*#__PURE__*/_reactDefault.default.createElement(_genreViewGenreView.GenreView, {
                genre: movies.find(m => m.genre.name === match.params.name).genre,
                onBackClick: () => history.goBack(),
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 211,
                  columnNumber: 15
                }
              }))
            );
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 205,
            columnNumber: 13
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.Route, {
          exact: true,
          path: "/actors",
          render: () => {
            console.log(actors);
            return actors.map(m => /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
              md: 3,
              key: m._id,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 218,
                columnNumber: 17
              }
            }, /*#__PURE__*/_reactDefault.default.createElement(_genreViewGenreView.ActorView, {
              actorsData: m,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 219,
                columnNumber: 21
              }
            })));
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 215,
            columnNumber: 11
          }
        })))
      );
    }
  }
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
