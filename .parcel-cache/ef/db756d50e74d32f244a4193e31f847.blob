var helpers = require("../../../../../.nvm/versions/node/v15.14.0/lib/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  _parcelHelpers.export(exports, "UpdateViewProfile", function () {
    return UpdateViewProfile;
  });
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  require('react-dom');
  require('prop-types');
  var _reactBootstrapForm = require('react-bootstrap/Form');
  var _reactBootstrapFormDefault = _parcelHelpers.interopDefault(_reactBootstrapForm);
  var _reactBootstrapButton = require('react-bootstrap/Button');
  var _reactBootstrapButtonDefault = _parcelHelpers.interopDefault(_reactBootstrapButton);
  require('react-bootstrap');
  require('react-bootstrap/Col');
  var _axios = require('axios');
  var _axiosDefault = _parcelHelpers.interopDefault(_axios);
  var _jsxFileName = "/home/giuseppe/Desktop/myMovies-client/src/components/profile-view/profile-update.jsx", _s = $RefreshSig$();
  function UpdateViewProfile(props) {
    _s();
    const [username, setUsername] = _react.useState('user.username');
    const [password, setPassword] = _react.useState('');
    const [email, setEmail] = _react.useState('user.email');
    const [usernameError, setUsernameError] = _react.useState({});
    const [passwordError, setPasswordError] = _react.useState({});
    const [emailError, setEmailError] = _react.useState({});
    const updateRequest = e => {
      e.preventDefault();
      const isValid = formValidation();
      if (isValid) {
        _axiosDefault.default.post('https://mymovies-db-api.herokuapp.com/users', {
          username: username,
          password: password,
          email: email
        }).then(response => {
          const data = response.data;
          console.log(data);
          window.open('/', '_self');
        }).catch(e => {
          console.log('error updating the user');
        });
        console.log(username, password, email);
        /*Send a request to the server for authentication*/
        /*then call props.onLoggedIn(username)*/
        props.onUpdate(username);
      }
      ;
    };
    const formValidation = () => {
      const usernameError = {};
      const passwordError = {};
      const emailError = {};
      let isValid = true;
      if (username.trim().length < 5) {
        usernameError.usernameShort = "Username must be at least 5 characters";
        isValid = false;
      }
      if (password.trim().length < 1) {
        passwordError.passwordMissing = "You must enter a password";
        isValid = false;
      }
      if (!email.includes(".") && !email.includes("@")) {
        emailError.emailNotEmail = "A valid email address is required";
        isValid = false;
      }
      setUsernameError(usernameError);
      setPasswordError(passwordError);
      setEmailError(emailError);
      return isValid;
    };
    const deleteRequest = e => {
      e.preventDefault();
      _axiosDefault.default.delete(`https://mymovies-db-api.herokuapp.com/users/${user}`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`
        }
      }).then(response => {
        alert('Your account has been deleted');
        localStorage.clear();
        window.open('/', '_self');
      }).catch(e => {
        console.log('Error deleting your account');
      });
    };
    return (
      /*#__PURE__*/_reactDefault.default.createElement("div", {
        className: "registration-view",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 87,
          columnNumber: 3
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default, {
        className: "form-label",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88,
          columnNumber: 5
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("h2", {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89,
          columnNumber: 7
        }
      }, "Update here your details"), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Group, {
        controlId: "formUsername",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 91,
          columnNumber: 9
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Label, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 92,
          columnNumber: 11
        }
      }, "Username: "), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Control, {
        type: "text",
        onChange: e => setUsername(e.target.value),
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 93,
          columnNumber: 11
        }
      })), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Group, {
        controlId: "formPassword",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 96,
          columnNumber: 9
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Label, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 97,
          columnNumber: 11
        }
      }, "Password: "), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Control, {
        type: "password",
        onChange: e => setPassword(e.target.value),
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 98,
          columnNumber: 11
        }
      })), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Group, {
        controlId: "formEmail",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 101,
          columnNumber: 9
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Label, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 102,
          columnNumber: 11
        }
      }, "Email: "), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Control, {
        type: "text",
        onChange: e => setEmail(e.target.value),
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 103,
          columnNumber: 11
        }
      })), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapButtonDefault.default, {
        variant: "dark",
        type: "submit",
        onClick: updateRequest,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 106,
          columnNumber: 9
        }
      }, "Submit"), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapButtonDefault.default, {
        variant: "danger",
        className: "primary-btn",
        type: "submit",
        onClick: deleteRequest,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 109,
          columnNumber: 9
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("span", {
        className: "text-color",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 109,
          columnNumber: 96
        }
      }, "Delete Profile"))))
    );
  }
  _s(UpdateViewProfile, "PoRH5zERDRw4VG+Cyp7APQOL6C4=");
  _c = UpdateViewProfile;
  var _c;
  $RefreshReg$(_c, "UpdateViewProfile");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
